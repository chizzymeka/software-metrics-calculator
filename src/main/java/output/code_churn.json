{"apache-tomcat-7.0.0-src":[{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\el\\BeanELResolver.java","filepathSuffix":"\\java\\javax\\el\\BeanELResolver.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"BeanELResolver.java","methods":{"getFeatureDescriptors(ELContext, Object)":"@Override\r\npublic Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        BeanInfo info = Introspector.getBeanInfo(base.getClass());\r\n        PropertyDescriptor[] pds = info.getPropertyDescriptors();\r\n        for (int i = 0; i < pds.length; i++) {\r\n            pds[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.TRUE);\r\n            pds[i].setValue(TYPE, pds[i].getPropertyType());\r\n        }\r\n        return Arrays.asList((FeatureDescriptor[]) pds).iterator();\r\n    } catch (IntrospectionException e) {\r\n        // \r\n    }\r\n    return null;\r\n}","getCommonPropertyType(ELContext, Object)":"@Override\r\npublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base != null) {\r\n        return Object.class;\r\n    }\r\n    return null;\r\n}","isReadOnly(ELContext, Object, Object)":"@Override\r\npublic boolean isReadOnly(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base == null || property == null) {\r\n        return false;\r\n    }\r\n    context.setPropertyResolved(true);\r\n    return this.readOnly || this.property(context, base, property).isReadOnly();\r\n}","getType(ELContext, Object, Object)":"@Override\r\npublic Class<?> getType(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base == null || property == null) {\r\n        return null;\r\n    }\r\n    context.setPropertyResolved(true);\r\n    return this.property(context, base, property).getPropertyType();\r\n}","getValue(ELContext, Object, Object)":"@Override\r\npublic Object getValue(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base == null || property == null) {\r\n        return null;\r\n    }\r\n    context.setPropertyResolved(true);\r\n    Method m = this.property(context, base, property).read(context);\r\n    try {\r\n        return m.invoke(base, (Object[]) null);\r\n    } catch (IllegalAccessException e) {\r\n        throw new ELException(e);\r\n    } catch (InvocationTargetException e) {\r\n        throw new ELException(message(context, \"propertyReadError\", new Object[] { base.getClass().getName(), property.toString() }), e.getCause());\r\n    } catch (Exception e) {\r\n        throw new ELException(e);\r\n    }\r\n}","getPropertyType()":"// Can't use Class<?> because API needs to match specification\r\n@SuppressWarnings(\"unchecked\")\r\npublic Class getPropertyType() {\r\n    return this.type;\r\n}","getReadMethod()":"public Method getReadMethod() {\r\n    return this.read(null);\r\n}","setValue(ELContext, Object, Object, Object)":"@Override\r\npublic void setValue(ELContext context, Object base, Object property, Object value) throws NullPointerException, PropertyNotFoundException, PropertyNotWritableException, ELException {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base == null || property == null) {\r\n        return;\r\n    }\r\n    context.setPropertyResolved(true);\r\n    if (this.readOnly) {\r\n        throw new PropertyNotWritableException(message(context, \"resolverNotWriteable\", new Object[] { base.getClass().getName() }));\r\n    }\r\n    Method m = this.property(context, base, property).write(context);\r\n    try {\r\n        m.invoke(base, value);\r\n    } catch (IllegalAccessException e) {\r\n        throw new ELException(e);\r\n    } catch (InvocationTargetException e) {\r\n        throw new ELException(message(context, \"propertyWriteError\", new Object[] { base.getClass().getName(), property.toString() }), e.getCause());\r\n    } catch (Exception e) {\r\n        throw new ELException(e);\r\n    }\r\n}","getWriteMethod()":"public Method getWriteMethod() {\r\n    return write(null);\r\n}","get(ELContext, String)":"private BeanProperty get(ELContext ctx, String name) {\r\n    BeanProperty property = this.properties.get(name);\r\n    if (property == null) {\r\n        throw new PropertyNotFoundException(message(ctx, \"propertyNotFound\", new Object[] { type.getName(), name }));\r\n    }\r\n    return property;\r\n}","property(ELContext, Object, Object)":"private final BeanProperty property(ELContext ctx, Object base, Object property) {\r\n    Class<?> type = base.getClass();\r\n    String prop = property.toString();\r\n    BeanProperties props = this.cache.get(type.getName());\r\n    if (props == null || type != props.getType()) {\r\n        props = new BeanProperties(type);\r\n        this.cache.put(type.getName(), props);\r\n    }\r\n    return props.get(ctx, prop);\r\n}","read(ELContext)":"private Method read(ELContext ctx) {\r\n    if (this.read == null) {\r\n        this.read = getMethod(this.owner, descriptor.getReadMethod());\r\n        if (this.read == null) {\r\n            throw new PropertyNotFoundException(message(ctx, \"propertyNotReadable\", new Object[] { type.getName(), descriptor.getName() }));\r\n        }\r\n    }\r\n    return this.read;\r\n}","getType()":"private Class<?> getType() {\r\n    return type;\r\n}","getMethod(Class, Method)":"private final static Method getMethod(Class<?> type, Method m) {\r\n    if (m == null || Modifier.isPublic(type.getModifiers())) {\r\n        return m;\r\n    }\r\n    Class<?>[] inf = type.getInterfaces();\r\n    Method mp = null;\r\n    for (int i = 0; i < inf.length; i++) {\r\n        try {\r\n            mp = inf[i].getMethod(m.getName(), m.getParameterTypes());\r\n            mp = getMethod(mp.getDeclaringClass(), mp);\r\n            if (mp != null) {\r\n                return mp;\r\n            }\r\n        } catch (NoSuchMethodException e) {\r\n            // Ignore\r\n        }\r\n    }\r\n    Class<?> sup = type.getSuperclass();\r\n    if (sup != null) {\r\n        try {\r\n            mp = sup.getMethod(m.getName(), m.getParameterTypes());\r\n            mp = getMethod(mp.getDeclaringClass(), mp);\r\n            if (mp != null) {\r\n                return mp;\r\n            }\r\n        } catch (NoSuchMethodException e) {\r\n            // Ignore\r\n        }\r\n    }\r\n    return null;\r\n}","get(K)":"public V get(K key) {\r\n    V value = this.eden.get(key);\r\n    if (value == null) {\r\n        value = this.longterm.get(key);\r\n        if (value != null) {\r\n            this.eden.put(key, value);\r\n        }\r\n    }\r\n    return value;\r\n}","write(ELContext)":"private Method write(ELContext ctx) {\r\n    if (this.write == null) {\r\n        this.write = getMethod(this.owner, descriptor.getWriteMethod());\r\n        if (this.write == null) {\r\n            throw new PropertyNotFoundException(message(ctx, \"propertyNotWritable\", new Object[] { type.getName(), descriptor.getName() }));\r\n        }\r\n    }\r\n    return this.write;\r\n}","getBeanProperty(String)":"public BeanProperty getBeanProperty(String name) {\r\n    return get(null, name);\r\n}","isReadOnly()":"public boolean isReadOnly() {\r\n    return this.write == null && (null == (this.write = getMethod(this.owner, descriptor.getWriteMethod())));\r\n}","put(K, V)":"public void put(K key, V value) {\r\n    if (this.eden.size() >= this.size) {\r\n        this.longterm.putAll(this.eden);\r\n        this.eden.clear();\r\n    }\r\n    this.eden.put(key, value);\r\n}","invoke(ELContext, Object, Object, Class<?>[], Object[])":"/**\r\n * @since EL 2.2\r\n */\r\n@Override\r\npublic Object invoke(ELContext context, Object base, Object method, Class<?>[] paramTypes, Object[] params) {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base == null || method == null) {\r\n        return null;\r\n    }\r\n    ExpressionFactory factory = ExpressionFactory.newInstance();\r\n    String methodName = (String) factory.coerceToType(method, String.class);\r\n    // Find the matching method\r\n    Method matchingMethod = null;\r\n    Class<?> clazz = base.getClass();\r\n    if (paramTypes != null) {\r\n        try {\r\n            matchingMethod = clazz.getMethod(methodName, paramTypes);\r\n        } catch (NoSuchMethodException e) {\r\n            throw new MethodNotFoundException(e);\r\n        }\r\n    } else {\r\n        int paramCount = 0;\r\n        if (params != null) {\r\n            paramCount = params.length;\r\n        }\r\n        Method[] methods = clazz.getMethods();\r\n        for (Method m : methods) {\r\n            if (m.getParameterTypes().length == paramCount) {\r\n                // Same number of parameters - use the first match\r\n                matchingMethod = m;\r\n                break;\r\n            }\r\n            if (m.isVarArgs()) {\r\n                matchingMethod = m;\r\n            }\r\n        }\r\n        if (matchingMethod == null) {\r\n            throw new MethodNotFoundException(\"Unable to find method [\" + methodName + \"] with [\" + paramCount + \"] parameters\");\r\n        }\r\n    }\r\n    Class<?>[] parameterTypes = matchingMethod.getParameterTypes();\r\n    Object[] parameters = null;\r\n    if (parameterTypes.length > 0) {\r\n        parameters = new Object[parameterTypes.length];\r\n        // params.length >= parameterTypes.length\r\n        @SuppressWarnings(\"null\")\r\n        int paramCount = params.length;\r\n        if (matchingMethod.isVarArgs()) {\r\n            int varArgIndex = parameterTypes.length - 1;\r\n            // First argCount-1 parameters are standard\r\n            for (int i = 0; (i < varArgIndex - 1); i++) {\r\n                parameters[i] = factory.coerceToType(params[i], parameterTypes[i]);\r\n            }\r\n            // Last parameter is the varags\r\n            Class<?> varArgClass = parameterTypes[varArgIndex].getComponentType();\r\n            for (int i = (varArgIndex); i < paramCount; i++) {\r\n                Object varargs = Array.newInstance(parameterTypes[paramCount], (paramCount - varArgIndex));\r\n                Array.set(varargs, i, factory.coerceToType(params[i], varArgClass));\r\n                parameters[varArgIndex] = varargs;\r\n            }\r\n        } else {\r\n            parameters = new Object[parameterTypes.length];\r\n            for (int i = 0; i < parameterTypes.length; i++) {\r\n                parameters[i] = factory.coerceToType(params[i], parameterTypes[i]);\r\n            }\r\n        }\r\n    }\r\n    Object result = null;\r\n    try {\r\n        result = matchingMethod.invoke(base, parameters);\r\n    } catch (IllegalArgumentException e) {\r\n        throw new ELException(e);\r\n    } catch (IllegalAccessException e) {\r\n        throw new ELException(e);\r\n    } catch (InvocationTargetException e) {\r\n        throw new ELException(e.getCause());\r\n    }\r\n    context.setPropertyResolved(true);\r\n    return result;\r\n}"}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\el\\ELException.java","filepathSuffix":"\\java\\javax\\el\\ELException.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"ELException.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\PostConstruct.java","filepathSuffix":"\\java\\javax\\annotation\\PostConstruct.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"PostConstruct.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\el\\CompositeELResolver.java","filepathSuffix":"\\java\\javax\\el\\CompositeELResolver.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"CompositeELResolver.java","methods":{"getFeatureDescriptors(ELContext, Object)":"@Override\r\npublic Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {\r\n    return new FeatureIterator(context, base, this.resolvers, this.size);\r\n}","getCommonPropertyType(ELContext, Object)":"@Override\r\npublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n    int sz = this.size;\r\n    Class<?> commonType = null, type = null;\r\n    for (int i = 0; i < sz; i++) {\r\n        type = this.resolvers[i].getCommonPropertyType(context, base);\r\n        if (type != null && (commonType == null || commonType.isAssignableFrom(type))) {\r\n            commonType = type;\r\n        }\r\n    }\r\n    return commonType;\r\n}","isReadOnly(ELContext, Object, Object)":"@Override\r\npublic boolean isReadOnly(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException {\r\n    context.setPropertyResolved(false);\r\n    int sz = this.size;\r\n    boolean readOnly = false;\r\n    for (int i = 0; i < sz; i++) {\r\n        readOnly = this.resolvers[i].isReadOnly(context, base, property);\r\n        if (context.isPropertyResolved()) {\r\n            return readOnly;\r\n        }\r\n    }\r\n    return false;\r\n}","getType(ELContext, Object, Object)":"@Override\r\npublic Class<?> getType(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException {\r\n    context.setPropertyResolved(false);\r\n    int sz = this.size;\r\n    Class<?> type;\r\n    for (int i = 0; i < sz; i++) {\r\n        type = this.resolvers[i].getType(context, base, property);\r\n        if (context.isPropertyResolved()) {\r\n            return type;\r\n        }\r\n    }\r\n    return null;\r\n}","hasNext()":"public boolean hasNext() {\r\n    if (this.next != null)\r\n        return true;\r\n    if (this.itr != null) {\r\n        while (this.next == null && itr.hasNext()) {\r\n            this.next = itr.next();\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    if (this.next == null) {\r\n        this.itr = null;\r\n        this.guaranteeIterator();\r\n    }\r\n    return hasNext();\r\n}","next()":"public FeatureDescriptor next() {\r\n    if (!hasNext())\r\n        throw new NoSuchElementException();\r\n    FeatureDescriptor result = this.next;\r\n    this.next = null;\r\n    return result;\r\n}","getValue(ELContext, Object, Object)":"@Override\r\npublic Object getValue(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException {\r\n    context.setPropertyResolved(false);\r\n    int sz = this.size;\r\n    Object result = null;\r\n    for (int i = 0; i < sz; i++) {\r\n        result = this.resolvers[i].getValue(context, base, property);\r\n        if (context.isPropertyResolved()) {\r\n            return result;\r\n        }\r\n    }\r\n    return null;\r\n}","remove()":"public void remove() {\r\n    throw new UnsupportedOperationException();\r\n}","setValue(ELContext, Object, Object, Object)":"@Override\r\npublic void setValue(ELContext context, Object base, Object property, Object value) throws NullPointerException, PropertyNotFoundException, PropertyNotWritableException, ELException {\r\n    context.setPropertyResolved(false);\r\n    int sz = this.size;\r\n    for (int i = 0; i < sz; i++) {\r\n        this.resolvers[i].setValue(context, base, property, value);\r\n        if (context.isPropertyResolved()) {\r\n            return;\r\n        }\r\n    }\r\n}","invoke(ELContext, Object, Object, Class<?>[], Object[])":"/**\r\n * @since EL 2.2\r\n */\r\n@Override\r\npublic Object invoke(ELContext context, Object base, Object method, Class<?>[] paramTypes, Object[] params) {\r\n    context.setPropertyResolved(false);\r\n    int sz = this.size;\r\n    Object obj;\r\n    for (int i = 0; i < sz; i++) {\r\n        obj = this.resolvers[i].invoke(context, base, method, paramTypes, params);\r\n        if (context.isPropertyResolved()) {\r\n            return obj;\r\n        }\r\n    }\r\n    return null;\r\n}","add(ELResolver)":"public void add(ELResolver elResolver) {\r\n    if (elResolver == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (this.size >= this.resolvers.length) {\r\n        ELResolver[] nr = new ELResolver[this.size * 2];\r\n        System.arraycopy(this.resolvers, 0, nr, 0, this.size);\r\n        this.resolvers = nr;\r\n    }\r\n    this.resolvers[this.size++] = elResolver;\r\n}","guaranteeIterator()":"private void guaranteeIterator() {\r\n    while (this.itr == null && this.idx < this.size) {\r\n        this.itr = this.resolvers[this.idx].getFeatureDescriptors(this.context, this.base);\r\n        this.idx++;\r\n    }\r\n}"}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\PreDestroy.java","filepathSuffix":"\\java\\javax\\annotation\\PreDestroy.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"PreDestroy.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\el\\ELContextListener.java","filepathSuffix":"\\java\\javax\\el\\ELContextListener.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"ELContextListener.java","methods":{"contextCreated(ELContextEvent)":"public void contextCreated(ELContextEvent event);"}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\Resource.java","filepathSuffix":"\\java\\javax\\annotation\\Resource.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"Resource.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\el\\ELContext.java","filepathSuffix":"\\java\\javax\\el\\ELContext.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"ELContext.java","methods":{"getFunctionMapper()":"public abstract FunctionMapper getFunctionMapper();","putContext(Class, Object)":"// Can't use Class<?> because API needs to match specification\r\npublic void putContext(@SuppressWarnings(\"unchecked\") Class key, Object contextObject) throws NullPointerException {\r\n    if (key == null || contextObject == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (this.map == null) {\r\n        this.map = new HashMap<Class<?>, Object>();\r\n    }\r\n    this.map.put(key, contextObject);\r\n}","getVariableMapper()":"public abstract VariableMapper getVariableMapper();","getContext(Class)":"// Can't use Class<?> because API needs to match specification\r\npublic Object getContext(@SuppressWarnings(\"unchecked\") Class key) {\r\n    if (this.map == null) {\r\n        return null;\r\n    }\r\n    return this.map.get(key);\r\n}","isPropertyResolved()":"public boolean isPropertyResolved() {\r\n    return this.resolved;\r\n}","getLocale()":"public Locale getLocale() {\r\n    return this.locale;\r\n}","setPropertyResolved(boolean)":"public void setPropertyResolved(boolean resolved) {\r\n    this.resolved = resolved;\r\n}","setLocale(Locale)":"public void setLocale(Locale locale) {\r\n    this.locale = locale;\r\n}","getELResolver()":"public abstract ELResolver getELResolver();"}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\security\\RolesAllowed.java","filepathSuffix":"\\java\\javax\\annotation\\security\\RolesAllowed.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"RolesAllowed.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\Resources.java","filepathSuffix":"\\java\\javax\\annotation\\Resources.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"Resources.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\ejb\\EJBs.java","filepathSuffix":"\\java\\javax\\ejb\\EJBs.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"EJBs.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\security\\DeclareRoles.java","filepathSuffix":"\\java\\javax\\annotation\\security\\DeclareRoles.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"DeclareRoles.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\Generated.java","filepathSuffix":"\\java\\javax\\annotation\\Generated.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"Generated.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\el\\ArrayELResolver.java","filepathSuffix":"\\java\\javax\\el\\ArrayELResolver.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"ArrayELResolver.java","methods":{"getFeatureDescriptors(ELContext, Object)":"@Override\r\npublic Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {\r\n    if (base != null && base.getClass().isArray()) {\r\n        FeatureDescriptor[] descs = new FeatureDescriptor[Array.getLength(base)];\r\n        for (int i = 0; i < descs.length; i++) {\r\n            descs[i] = new FeatureDescriptor();\r\n            descs[i].setDisplayName(\"[\" + i + \"]\");\r\n            descs[i].setExpert(false);\r\n            descs[i].setHidden(false);\r\n            descs[i].setName(\"\" + i);\r\n            descs[i].setPreferred(true);\r\n            descs[i].setValue(RESOLVABLE_AT_DESIGN_TIME, Boolean.FALSE);\r\n            descs[i].setValue(TYPE, Integer.class);\r\n        }\r\n        return Arrays.asList(descs).iterator();\r\n    }\r\n    return null;\r\n}","getCommonPropertyType(ELContext, Object)":"@Override\r\npublic Class<?> getCommonPropertyType(ELContext context, Object base) {\r\n    if (base != null && base.getClass().isArray()) {\r\n        return Integer.class;\r\n    }\r\n    return null;\r\n}","isReadOnly(ELContext, Object, Object)":"@Override\r\npublic boolean isReadOnly(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base != null && base.getClass().isArray()) {\r\n        context.setPropertyResolved(true);\r\n        int idx = coerce(property);\r\n        checkBounds(base, idx);\r\n    }\r\n    return this.readOnly;\r\n}","getType(ELContext, Object, Object)":"@Override\r\npublic Class<?> getType(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base != null && base.getClass().isArray()) {\r\n        context.setPropertyResolved(true);\r\n        int idx = coerce(property);\r\n        checkBounds(base, idx);\r\n        return base.getClass().getComponentType();\r\n    }\r\n    return null;\r\n}","getValue(ELContext, Object, Object)":"@Override\r\npublic Object getValue(ELContext context, Object base, Object property) throws NullPointerException, PropertyNotFoundException, ELException {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base != null && base.getClass().isArray()) {\r\n        context.setPropertyResolved(true);\r\n        int idx = coerce(property);\r\n        if (idx < 0 || idx >= Array.getLength(base)) {\r\n            return null;\r\n        }\r\n        return Array.get(base, idx);\r\n    }\r\n    return null;\r\n}","coerce(Object)":"private final static int coerce(Object property) {\r\n    if (property instanceof Number) {\r\n        return ((Number) property).intValue();\r\n    }\r\n    if (property instanceof Character) {\r\n        return ((Character) property).charValue();\r\n    }\r\n    if (property instanceof Boolean) {\r\n        return (((Boolean) property).booleanValue() ? 1 : 0);\r\n    }\r\n    if (property instanceof String) {\r\n        return Integer.parseInt((String) property);\r\n    }\r\n    throw new IllegalArgumentException(property != null ? property.toString() : \"null\");\r\n}","setValue(ELContext, Object, Object, Object)":"@Override\r\npublic void setValue(ELContext context, Object base, Object property, Object value) throws NullPointerException, PropertyNotFoundException, PropertyNotWritableException, ELException {\r\n    if (context == null) {\r\n        throw new NullPointerException();\r\n    }\r\n    if (base != null && base.getClass().isArray()) {\r\n        context.setPropertyResolved(true);\r\n        if (this.readOnly) {\r\n            throw new PropertyNotWritableException(message(context, \"resolverNotWriteable\", new Object[] { base.getClass().getName() }));\r\n        }\r\n        int idx = coerce(property);\r\n        checkBounds(base, idx);\r\n        if (value != null && !base.getClass().getComponentType().isAssignableFrom(value.getClass())) {\r\n            throw new ClassCastException(message(context, \"objectNotAssignable\", new Object[] { value.getClass().getName(), base.getClass().getComponentType().getName() }));\r\n        }\r\n        Array.set(base, idx, value);\r\n    }\r\n}","checkBounds(Object, int)":"private final static void checkBounds(Object base, int idx) {\r\n    if (idx < 0 || idx >= Array.getLength(base)) {\r\n        throw new PropertyNotFoundException(new ArrayIndexOutOfBoundsException(idx).getMessage());\r\n    }\r\n}"}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\security\\RunAs.java","filepathSuffix":"\\java\\javax\\annotation\\security\\RunAs.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"RunAs.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\el\\ELContextEvent.java","filepathSuffix":"\\java\\javax\\el\\ELContextEvent.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"ELContextEvent.java","methods":{"getELContext()":"public ELContext getELContext() {\r\n    return (ELContext) this.getSource();\r\n}"}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\ejb\\EJB.java","filepathSuffix":"\\java\\javax\\ejb\\EJB.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"EJB.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\security\\DenyAll.java","filepathSuffix":"\\java\\javax\\annotation\\security\\DenyAll.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"DenyAll.java","methods":{}},{"filepath":"E:\\Year 1 Project Dataset\\Test Dataset\\apache-tomcat-7.0.0-src\\java\\javax\\annotation\\security\\PermitAll.java","filepathSuffix":"\\java\\javax\\annotation\\security\\PermitAll.java","versionName":"apache-tomcat-7.0.0-src","sourcefileName":"PermitAll.java","methods":{}}]}